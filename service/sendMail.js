// const { google } = require('googleapis');
// const nodemailer = require('nodemailer');
// require('dotenv').config();

// const CUSTOMER_ID = process.env.CUSTOMER_ID;
// const CUSTOMER_SECRET_CODE = process.env.CUSTOMER_SECRET_CODE;
// const REDIRECT_URL = process.env.REDIRECT_URL;
// // const REFRESH_TOKEN = process.env.REFRESH_TOKEN;
// // dell hi·ªÉu sao kh√¥ng l·∫•y ƒëc ref_token ph·∫£i ƒë∆∞a th·∫≥ng n√≥ v√†o thay v√¨ l·∫•y qua env
// const REFRESH_TOKEN = "1//04Oqtcs6T2biCCgYIARAAGAQSNwF-L9Ir9T5qEEdZ06oTNMAYr-O_Cmr7-4j12yW8sOJHcTKTAOOP8w2Xr1ShnV5MRv0Fkv4q76E";
// const oAuth2Client = new google.auth.OAuth2(CUSTOMER_ID, CUSTOMER_SECRET_CODE, REDIRECT_URL);
// oAuth2Client.setCredentials({ refresh_token: REFRESH_TOKEN });
// const sendMail = async (name, email, phone_number, address, comment) => {
//     try {
//         const accessToken = await oAuth2Client.getAccessToken();

//         const transporter = nodemailer.createTransport({
//             service: 'gmail',
//             auth: {
//                 type: 'OAuth2',
//                 user: '22a1001d0222@students.hou.edu.vn',
//                 clientId: CUSTOMER_ID,
//                 clientSecret: CUSTOMER_SECRET_CODE,
//                 refreshToken: REFRESH_TOKEN,
//                 accessToken: accessToken
//             }
//         });

//         const info = await transporter.sendMail({
//             from: '"Enkarin_ üëª" <22a1001d0222@students.hou.edu.vn>', // sender address
//             to: "hoangnam12a2003km2@gmail.com", // list of receivers
//             subject: "Hello ‚úî", // Subject line
//             text: "Hello world?", // plain text body
//             html: `
//                 <p>name : ${name}</p>
//                 <p>email : ${email}</p>
//                 <p>phone : ${phone_number}</p>
//                 <p>address : ${address}</p>
//                 <p>comment : ${comment}</p>
//                 <p style="color:red"> : ${REFRESH_TOKEN}</p>
//                 `
//             // html body
//         });

//         console.log('Message sent: %s', info);
//     } catch (error) {
//         console.error('Error sending email:', error);
//     }
// };

// module.exports.mail = sendMail;




/*
Error sending email: Error: connect ETIMEDOUT 74.125.23.108:465
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1595:16) {
  errno: -4039,
  code: 'ESOCKET',
  syscall: 'connect',
  address: '74.125.23.108',
  port: 465,
  command: 'CONN'



  ƒë·∫°i kh√°i l√† L·ªói ETIMEDOUT cho bi·∫øt r·∫±ng ·ª©ng d·ª•ng c·ªßa b·∫°n
   kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß SMTP c·ªßa Gmail trong kho·∫£ng
   th·ªùi gian quy ƒë·ªãnh


l√∫c ko l·ªói
html:
                `<p>name : ${name}</p>
                <p>email : ${email}</p>
                <p>phone : ${phone_number}</p>
                <p>address : ${address}</p>
                <p>comment : ${comment}</p>`, // html body
}*/

/*ƒê√∫ng v·∫≠y, OAuth 2.0 l√† m·ªôt giao th·ª©c ·ªßy quy·ªÅn (authorization protocol) cho ph√©p ng∆∞·ªùi d√πng c·∫•p quy·ªÅn truy c·∫≠p cho ·ª©ng d·ª•ng c·ªßa b√™n th·ª© ba m√† kh√¥ng c·∫ßn ph·∫£i chia s·∫ª m·∫≠t kh·∫©u c·ªßa t√†i kho·∫£n ng∆∞·ªùi d√πng. C√°c ƒëi·ªÉm ch√≠nh c·ªßa OAuth 2.0 nh∆∞ sau:

Kh√¥ng Chia S·∫ª M·∫≠t Kh·∫©u: Ng∆∞·ªùi d√πng kh√¥ng c·∫ßn cung c·∫•p m·∫≠t kh·∫©u cho ·ª©ng d·ª•ng b√™n th·ª© ba, gi·∫£m nguy c∆° l·ªô th√¥ng tin.

C·∫•p Quy·ªÅn Truy C·∫≠p An To√†n: Thay v√¨ m·∫≠t kh·∫©u, ng∆∞·ªùi d√πng c·∫•p cho ·ª©ng d·ª•ng b√™n th·ª© ba quy·ªÅn truy c·∫≠p v√†o t√†i nguy√™n c·ªßa h·ªç th√¥ng qua c√°c token (access token v√† refresh token).

Access Token v√† Refresh Token:

Access Token: ƒê∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ truy c·∫≠p v√†o c√°c t√†i nguy√™n c·ªßa ng∆∞·ªùi d√πng (v√≠ d·ª•: ƒë·ªçc email, g·ª≠i email).
Refresh Token: ƒê∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l√†m m·ªõi access token khi n√≥ h·∫øt h·∫°n, th∆∞·ªùng c√≥ th·ªùi h·∫°n s·ªëng d√†i h∆°n access token.
Ph·∫°m Vi (Scope): Ng∆∞·ªùi d√πng c√≥ th·ªÉ ch·ªâ ƒë·ªãnh ph·∫°m vi (scope) c·ªßa quy·ªÅn truy c·∫≠p m√† h·ªç mu·ªën c·∫•p cho ·ª©ng d·ª•ng b√™n th·ª© ba (v√≠ d·ª•: ch·ªâ truy c·∫≠p v√†o danh s√°ch email m√† kh√¥ng c√≥ quy·ªÅn g·ª≠i email).

Qu·∫£n L√Ω Quy·ªÅn Truy C·∫≠p: Ng∆∞·ªùi d√πng c√≥ th·ªÉ qu·∫£n l√Ω v√† thu h·ªìi c√°c quy·ªÅn truy c·∫≠p ƒë√£ c·∫•p cho c√°c ·ª©ng d·ª•ng b√™n th·ª© ba t·ª´ trang qu·∫£n l√Ω t√†i kho·∫£n c·ªßa nh√† cung c·∫•p d·ªãch v·ª• (v√≠ d·ª•: Google Account Permissions).

ƒê∆∞·ª£c S·ª≠ D·ª•ng R·ªông R√£i: L√† m·ªôt ti√™u chu·∫©n ƒë∆∞·ª£c s·ª≠ d·ª•ng ph·ªï bi·∫øn tr√™n c√°c n·ªÅn t·∫£ng web, di ƒë·ªông v√† desktop, gi√∫p c√°c ·ª©ng d·ª•ng t∆∞∆°ng t√°c an to√†n v√† hi·ªáu qu·∫£ v·ªõi nhau.

V·ªõi OAuth 2.0, ng∆∞·ªùi d√πng c√≥ th·ªÉ tin t∆∞·ªüng r·∫±ng th√¥ng tin c√° nh√¢n c·ªßa h·ªç ƒë∆∞·ª£c b·∫£o v·ªá m·ªôt c√°ch an to√†n khi s·ª≠ d·ª•ng c√°c d·ªãch v·ª• c·ªßa b√™n th·ª© ba m√† kh√¥ng c·∫ßn lo l·∫Øng v·ªÅ vi·ªác l·ªô m·∫≠t kh·∫©u. */

// n√≥i chung ko nh·∫•t thi·∫øt c√≥ oauth 2.0 ƒë·ªÉ d√πng nodemailer
/*
1. import nodemailer, dotenv
2. l·∫•y mail pass c·ªßa email
3. 
    const transporter = nodemailer.createTransport({
    host: "smtp.ethereal.email",  // n·ªõi email ƒë∆∞·ª£c g·ª≠i t·ªõi
    port: 587,  // c·ªïng ƒë·ªÉ k·∫øt n·ªëi v·ªõi ethereal hay host
    secure: false, // Use `true` for port 465, `false` for all other ports [ x√°c ƒë·ªãnh l·∫°i c·ªïng s·∫Ω d√πng ]
      auth: {
     user: "maddison53@ethereal.email", // email
     pass: "jn7jnAPss4f63QBp6D",  // m·∫≠t kh·∫©u email ho·∫∑c 1 ƒëo·∫°n m√£ h√≥a t·ª´ m·∫≠t kh·∫©u [·ªü ƒë√¢y l√† ƒëo·∫°n m√£ h√≥a - c√°ch ƒë·ªÉ c√≥ - keyword to find :App password ]
  },
4. ph·∫ßn c√≤n l·∫°i th√¨ y h·ªát
});
*/




const nodemailer = require('nodemailer');

const sendMail = async (name, email, phone_number, address, comment) => {
    try {
        const transporter = nodemailer.createTransport({
            host: "smtp.gmail.com",
            port: 587,
            secure: false, // Use `true` for port 465, `false` for all other ports
            auth: {
                user: "22a1001d0222@students.hou.edu.vn",
                pass: "wtvx dyrt rvrd oewx", // b·ªè space c≈©ng v·∫´n ƒë∆∞·ª£c nha
            },
        });

        const info = await transporter.sendMail({
            from: '"Enkarin_ üëª" <22a1001d0222@students.hou.edu.vn>', // sender address
            to: "hoangnam12a2003km2@gmail.com", // list of receivers
            subject: "Hello ‚úî", // Subject line
            text: "Hello world?", // plain text body
            html: `
                <p>name : ${name}</p>
                <p>email : ${email}</p>
                <p>phone : ${phone_number}</p>
                <p>address : ${address}</p>
                <p>comment : ${comment}</p>
                <p style="color:red">I wanna say : Hello World</p>
            `, // html body
        });
    } catch (error) {
        console.error('Error sending email:', error);
        throw error; // Re-throw the error to propagate it if needed
    }
};

module.exports.mail = sendMail;
/*1 s·ªë l·ªói c√°ch l·∫•y console.error('Error sending email:', error);
Invalid login: 534-5.7.9 Application-specific password required. For more information, go to
    [n√≥ y√™u c·∫ßu d√πng m·∫≠t kh·∫©u app password l·∫•y t·ª´ ph·∫ßn qu·∫£n l√Ω t√†i kho·∫£n google trong x√°c minh 2 b∆∞·ªõc]
Error: Invalid login: 535-5.7.8 Username and Password not accepted. For more information, go to
    [sai pass or email]
Error: Invalid login: 535 Authentication failed
    [c√°ch s·ª≠a ƒë·ªïi smtp.ethereal.email th√†nh smtp.gmail.com]
Error sending email: Error: getaddrinfo ENOTFOUND smtp.gmail.com
    [ƒë√∫ng c·ªïng sai port ƒë·ªïi th√†nh port 587 v√† secure l√† false]
Error: connect ETIMEDOUT 95.216.108.161:465
    [ sai c·ªïng v√† port ƒë·ªïi th√†nh smtp.gmail.com v√† secure: false, port 587]
 */
